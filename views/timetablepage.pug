.content
  h1.timetable_page_label= `${timetablePage.timetable_page_label}`
  if options.effectiveDate
    .effective-date= `Effective ${options.effectiveDate}`

  if timetablePage.timetables.length > 1
    div Jump to
    ul.table-of-contents
      each timetable in timetablePage.timetables
        li
          a(href=`#timetable_id_${timetable.timetable_id}`)= timetable.timetable_label

  each timetable in timetablePage.timetables

    .timetable(id=`timetable_id_${timetable.timetable_id}`)
      if timetablePage.timetables.length > 1
        h2.description= timetable.timetable_label
      .service_notes= timetable.service_notes
      .timetable_days= timetable.day_list
      table.table.table-responsive

        if timetable.orientation === 'horizontal'
          colgroup
            col
            each trip, idx in timetable.orderedTrips
              col(id=`trip_id_${trip.trip_id}` class=`run_${idx} ${(trip.trip_short_name) ? 'trip_short_name_' + trip.trip_short_name : ''}`)
          thead
            tr
              th.stop_header(scope="column") Stop
              each trip, idx in timetable.orderedTrips
                th.run_header(scope="column")
                  if trip.trip_short_name
                    span= trip.trip_short_name
                  else
                    span= `Run #${idx + 1}`

                  if options.showDayList
                    span= ` ${trip.day_list}`

          tbody
            -var previousCity
            each stop in timetable.stops
              if previousCity !== stop.stop_city && options.showStopCity
                tr.city_row
                  th(scope="row" colspan=`${stop.trips.length + 1}`)= stop.stop_city
              -previousCity = stop.stop_city

              tr.stop_row(id=`stop_id_${stop.stop_id}`)
                th(scope="row")
                  .stop_name
                    span= stop.stop_name
                    if stop.type === 'arrival'
                      span &nbsp;(Arrival)
                    else if stop.type === 'departure'
                      span &nbsp;(Departure)
                  .stop_code= stop.stop_code
                  .stop_description= stop.stop_desc

                each trip in stop.trips
                  td.stop_time(class=`${trip.classes.join(' ')}`)
                    if stop.type === 'arrival'
                      span.stop_time_text!= trip.arrival_formatted_time
                      span.stop_time_period= trip.arrival_formatted_period
                    else
                      span.stop_time_text!= trip.departure_formatted_time
                      span.stop_time_period= trip.departure_formatted_period
        else
          colgroup
            each stop, idx in timetable.stops
              col(id=`stop_id_${stop.stop_id}` class=`stop_${idx}`)
          thead
            tr
              each stop, idx in timetable.stops
                th.stop_header(scope="column")= stop.stop_name

          tbody
            each trip, idx in timetable.orderedTrips
              tr.trip_row(id=`trip_id_${trip.trip_id}`)
                each stop in timetable.stops
                  td.stop_time(class=`${stop.trips[idx].classes.join(' ')}`)
                    span.stop_time_text!= stop.trips[idx].arrival_formatted_time
                    span.stop_time_period= stop.trips[idx].arrival_formatted_period


      .timetable-bottom
        .notes
          if options.requestStopSymbolUsed
            .note= `${options.requestStopSymbol} = Request stop - call for pickup`
          if options.noServiceSymbolUsed
            .note= `${options.noServiceSymbol} = No service at this timepoint`

        .calendar_dates
          if timetable.specialDates.excludedDates.length
            .excluded_dates Service not provided on:&nbsp;
              span= timetable.specialDates.excludedDates.join(', ')
          if timetable.specialDates.includedDates.length
            .included_dates Service provided on:
              span= timetable.specialDates.includedDates.join(', ')

      if options.showMap
        div(id=`map_${timetable.timetable_id}`).map

        script.
          var timetableId = '#{timetable.timetable_id}';
          var stops = !{JSON.stringify(timetable.stopsForMap)};
          var shapes = !{JSON.stringify(timetable.shapes)};

          L.mapbox.accessToken = '#{options.mapboxAccessToken}';
          var map = L.mapbox.map(`map_${timetableId}`, 'mapbox.streets');

          map.scrollWheelZoom.disable();

          var markers = L.featureGroup(stops.map(function(stop) {
            var popupContent = '<h2>' + stop.stop_name + '</h2>' + stop.stop_times.join('<br>');
            return L.circleMarker([stop.stop_lat, stop.stop_lon], {title: stop.stop_name}).bindPopup(popupContent);
          })).addTo(map);
          var lineStyle = {
            color: '#402fff',
            opacity: 1
          }
          if (shapes) {
            shapes.forEach(function(shape) {
              L.polyline(shape, lineStyle).addTo(map);
            });
          }

          map.fitBounds(markers.getBounds());
