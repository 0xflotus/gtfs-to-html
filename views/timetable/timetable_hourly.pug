- function getMinutesFromTime(time) {
-   const tripParts = time.split(':');
-   return parseInt(tripParts[0], 10) * 60 + parseInt(tripParts[1], 10);
- }

- function formatTime(time) {
-   const tripParts = time.split(':');
-   return `:${tripParts[1]}`
- }

- function formatTrips(trips, hasFrequencies) {
-   const times = [];
-   const firstTripMinutes = getMinutesFromTime(trips[0].arrival_time);
-   if (hasFrequencies) {
-     for (const trip of trips) {
-       const minutes = getMinutesFromTime(trip.arrival_time);
-       if (minutes >= firstTripMinutes + 60) {
-         break;
-       }
-       times.push(trip.arrival_time);
-     }
-   } else {
-     times.push(trips[0].arrival_time);
-   }
-   return times.map(formatTime).join(', ');
- }

.table-container
  table.table.table-striped.table-hourly(summary= getTimetableSummary(timetable))
    caption.sr-only= `${getTimetableLabel(timetable)} | ${timetable.dayList}`
    thead
      tr
        th.stop-header(scope="col") Stop
        th(scope="col") Minutes after the hour

    tbody
      if timetable.frequencies && !timetable.frequencyExactTimes
        tr.trip-row
          td.trip-frequency(colspan="2")= formatFrequencyWarning(timetable.frequencies)
      - var previousCity
      each stop in timetable.stops
        if previousCity !== stop.stop_city && config.showStopCity
          tr.city-row
            th(scope="row" colspan="2")= stop.stop_city
        - previousCity = stop.stop_city

        tr.stop-row(id=`stop_id_${stop.stop_id}`)
          th(scope="row")
            include timetable_stopname.pug

          td.stop-time= formatTrips(stop.trips, !!timetable.frequencies)

- var firstStop = timetable.stops[0]
- var firstTripStartTime = firstStop.trips[0]
- var lastStop = timetable.stops[timetable.stops.length - 1]
- var lastTripEndTime = lastStop.trips[lastStop.trips.length - 1]
.table-hourly-notes= `Service begins at ${firstStop.stop_name} at ${firstTripStartTime.arrival_formatted_time} ${firstTripStartTime.arrival_formatted_period} and ends at ${lastStop.stop_name} at ${lastTripEndTime.arrival_formatted_time} ${lastTripEndTime.arrival_formatted_period}.`
